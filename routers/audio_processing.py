import os
from random import randint

from aiogram import Router, types, F
from aiogram.enums import ParseMode, ChatAction
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.chat_action import ChatActionSender
# from config import bot

from modules.audio_defs import audio_from_video
from states import Vtovoice

router = Router(name=__name__)

# –§—É–Ω–∫—Ü–∏—è –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
@router.message(Command("video_to_voice"))
async def handle_vtovoice(message: types.Message, state: FSMContext):
    await state.set_state(Vtovoice.getting_processing)
    test_text = """üìπ Please send me a <b>video note</b>, and I will convert it to a voice message. üé§"""

    await message.answer(text=test_text,
                         parse_mode=ParseMode.HTML)


@router.message(F.video_note|F.video, Vtovoice.getting_processing)
async def video_to_voice_processing(message: types.VideoNote, state:FSMContext):

    action_sender = ChatActionSender(
        bot=message.bot,
        chat_id=message.chat.id,
        action=ChatAction.UPLOAD_VOICE,
    )
    action_recorder = ChatActionSender(
        bot=message.bot,
        chat_id=message.chat.id,
        action=ChatAction.RECORD_VOICE,
    )
    async with action_recorder:
        await message.bot.send_chat_action(
            chat_id=message.chat.id,
            action=ChatAction.RECORD_VOICE,
        )

    # bot = message.bot
    print("–ø—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç")
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
    try:
        if message.video_note:
            file_id = message.video_note.file_id
        else:
            file_id = message.video.file_id
        file = await message.bot.get_file(file_id)

    except:
        error_text = (f"""‚õîÔ∏è <b>Failed to receive the file.</b>  
The file is too big. Please upload a file smaller than <b>20 MB</b>."""
                      # f"\nError: {e}"
                      )
        await message.answer(text=error_text,
                             parse_mode=ParseMode.HTML)
        return

    print("–ø—ã—Ç–∞—é—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    file_path = file.file_path
    local_filename = f"downloads/{file_id}.mp4"

    # –§–æ—Ä–º–∏—Ä—É–µ–º "—Å–æ–ª—å" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –∫ –∏–º–µ–Ω–∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤ –æ–¥–∏–Ω –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
    sault = randint(0, 50000)
    output_path = local_filename[:-4] + f"{sault}.mp3"

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs("downloads", exist_ok=True)

    print("–ø—ã—Ç–∞—é—Å—å —Å–∫–∞—á–∞—Ç—å")
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await message.bot.download_file(file_path,
                            destination=local_filename
                            )

    print("–≥–æ—Ç–æ–≤–ª—é—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")
    await audio_from_video(local_filename, output_path)
    # if successfull == False:
    #     print("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–∞")
    #     duration_text = """‚õîÔ∏èThe bot can <b>ONLY</b> process videos <b>SHORTER than 60 seconds!</b>‚õîÔ∏è"""
    #     await message.answer(text=duration_text,
    #                          parse_mode=ParseMode.HTML)
    #     os.remove(local_filename)
    #     return

    waiting_text = """‚úÖ I got it.  
Please wait a moment..."""
    msg = await message.answer(text=waiting_text,
                               parse_mode=ParseMode.HTML)

    # –ü–æ–∫–∞–∑—ã–≤–∞—é —á—Ç–æ –∫—Ä—É–∂–æ–∫ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    async with action_sender:
        await message.bot.send_chat_action(
            chat_id=message.chat.id,
            action=ChatAction.UPLOAD_VOICE,
        )

    print("–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∫–∞–∫ voice
    await message.reply_voice(voice=types.FSInputFile(path=output_path))

    await msg.delete()
    await state.clear()

    print("–ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
    os.remove(local_filename)
    os.remove(output_path)



# –§—É–Ω–∫—Ü–∏—è mp3 –∏–∑ –≤–∏–¥–µ–æ
@router.message(Command("mp4_to_mp3"))
async def handle_vtomp3(message: types.Message, state: FSMContext):
    # await state.set_state(Vtovoice.getting_processing)
    test_text = """üìπ Please send me a <b>video note</b>, and I will convert it to a mp3 audio. üé§"""

    await message.answer(text=test_text,
                         parse_mode=ParseMode.HTML)


@router.message(F.video_note|F.video, Vtovoice.getting_processing)
async def video_to_mp3_processing(message: types.VideoNote, state:FSMContext):

    action_sender = ChatActionSender(
        bot=message.bot,
        chat_id=message.chat.id,
        action=ChatAction.UPLOAD_VOICE,
    )
    action_recorder = ChatActionSender(
        bot=message.bot,
        chat_id=message.chat.id,
        action=ChatAction.RECORD_VOICE,
    )
    async with action_recorder:
        await message.bot.send_chat_action(
            chat_id=message.chat.id,
            action=ChatAction.RECORD_VOICE,
        )

    # bot = message.bot
    print("–ø—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç")
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
    try:
        if message.video_note:
            file_id = message.video_note.file_id
        else:
            file_id = message.video.file_id
        file = await message.bot.get_file(file_id)

    except:
        error_text = (f"""‚õîÔ∏è <b>Failed to receive the file.</b>  
The file is too big. Please upload a file smaller than <b>20 MB</b>."""
                      # f"\nError: {e}"
                      )
        await message.answer(text=error_text,
                             parse_mode=ParseMode.HTML)
        return

    print("–ø—ã—Ç–∞—é—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    file_path = file.file_path
    local_filename = f"downloads/{file_id}.mp4"

    # –§–æ—Ä–º–∏—Ä—É–µ–º "—Å–æ–ª—å" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –∫ –∏–º–µ–Ω–∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤ –æ–¥–∏–Ω –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
    sault = randint(0, 50000)
    output_path = local_filename[:-4] + f"{sault}.mp3"

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs("downloads", exist_ok=True)

    print("–ø—ã—Ç–∞—é—Å—å —Å–∫–∞—á–∞—Ç—å")
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await message.bot.download_file(file_path,
                            destination=local_filename
                            )

    print("–≥–æ—Ç–æ–≤–ª—é—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")
    await audio_from_video(local_filename, output_path)

    waiting_text = """‚úÖ I got it.  
Please wait a moment..."""
    msg = await message.answer(text=waiting_text,
                               parse_mode=ParseMode.HTML)

    # –ü–æ–∫–∞–∑—ã–≤–∞—é —á—Ç–æ –∫—Ä—É–∂–æ–∫ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    async with action_sender:
        await message.bot.send_chat_action(
            chat_id=message.chat.id,
            action=ChatAction.UPLOAD_VOICE,
        )

    print("–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∫–∞–∫ voice
    await message.reply_audio(audio=types.FSInputFile(path=output_path))

    await msg.delete()
    # await state.clear()

    print("–ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
    os.remove(local_filename)
    os.remove(output_path)


# –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ê—É–¥–∏–æ –≤ –ì–°
@router.message(F.audio)
async def handle_audio(message: types.Audio):
    # await message.bot.send_chat_action(
    #     chat_id=message.chat.id,
    #     action=ChatAction.UPLOAD_VOICE,
    # )
    action_sender = ChatActionSender(
        bot = message.bot,
        chat_id= message.chat.id,
        action=ChatAction.UPLOAD_VOICE,
    )
    action_recorder = ChatActionSender(
        bot=message.bot,
        chat_id=message.chat.id,
        action=ChatAction.RECORD_VOICE,
    )
    async with action_recorder:
        await message.bot.send_chat_action(
            chat_id=message.chat.id,
            action=ChatAction.RECORD_VOICE,
        )

    # bot = message.bot
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
    try:
        file_id = message.audio.file_id
        file = await message.bot.get_file(file_id)
    except:
        error_text = (f"""‚õîÔ∏è <b>Failed to receive the file.</b>  
The file is too big. Please upload a file smaller than <b>20 MB</b>."""
                      # f"\nError: {e}"
                      )
        await message.answer(text=error_text,
                             parse_mode=ParseMode.HTML)
        return


    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    file_path = file.file_path
    local_filename = f"downloads/{file_id}.mp3"

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs("downloads", exist_ok=True)

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await message.bot.download_file(file_path, destination=local_filename)



    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ –≤—Å—ë –∏–¥—ë—Ç –ø–æ –ø–ª–∞–Ω—É
    waiting_text = """‚úÖ I got it.  
Please wait a moment..."""
    msg = await message.answer(text=waiting_text,
                         parse_mode=ParseMode.HTML)

    async with action_recorder:
        await message.bot.send_chat_action(
            chat_id=message.chat.id,
            action=ChatAction.UPLOAD_VOICE,
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∫–∞–∫ voice
    await message.reply_voice(voice=types.FSInputFile(path=local_filename))

    await msg.delete()

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
    os.remove(local_filename)

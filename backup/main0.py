import asyncio
import logging
import os

from aiogram.types import LinkPreviewOptions
from aiogram.utils import markdown
from aiogram.utils.chat_action import ChatActionSender
from decouple import config
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode, ChatAction


from aiogram.fsm.context import FSMContext

import ffmpeg
from random import randint

from states import Avangard, Vtovoice, Video_processing

bot_token = config('BOT_TOKEN')

bot = Bot(token=bot_token)
dp = Dispatcher()

def is_number(n):
    try:
        int(n)
        return True
    except ValueError:
        return False

# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞
@dp.message(CommandStart())
async def handle_start(message: types.Message):
    url ="https://sdmntpreastus2.oaiusercontent.com/files/00000000-60cc-51f6-9d6b-4c8d1e75ceac/raw?se=2025-04-05T14%3A13%3A54Z&sp=r&sv=2024-08-04&sr=b&scid=0dd2fe23-ebd7-5f9e-8874-d61e7e1e10ba&skoid=3f3a9132-9530-48ef-96b7-fee5a811733f&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2025-04-05T08%3A07%3A23Z&ske=2025-04-06T08%3A07%3A23Z&sks=b&skv=2024-08-04&sig=fTrYnU6l%2BLQVSzlNgFfmAmHuNkpq5rh0EGR4E5wjmic%3D"
    hello_text = f"""{markdown.hide_link(url)}üëã Hello, <b>{message.from_user.full_name}</b>!  
üéß Welcome to the <b>Audio & Video Conversion Bot</b> üîÅ

Here you can easily convert:  
üéµ <b>Audio files</b> ‚Üí <i>Voice messages</i>  
üé¨ <b>Video files</b> ‚Üí <i>Video notes</i>
üéß <b>Video notes</b> ‚Üí <i>Voice messages</i>

‚ùì Type /help to learn how to use the bot.
"""
    old_text = f"{markdown.hide_link(url)}Hello, <b>{message.from_user.full_name}</b>! Welcome to the Audio to voice conversion tool. üîÅ üìÑ\nIn this bot, you can easily convert audio and video files into voice and video messages, respectively.\n\n\nType'\help' to find out how to use it."
    await message.answer(text= hello_text,
                         parse_mode=ParseMode.HTML,
                         link_preview_options= LinkPreviewOptions(
                             is_disabled=False,
                             url=url,
                             show_above_text=True,
                         )
                    )



# –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏
@dp.message(Command("help"))
async def handle_help(message: types.Message):
    help_text = """üîÑ This bot converts:  
üéµ <b>MP3 audio files</b> ‚Üí <i>Voice messages</i>  
üé¨ <b>MP4 videos</b> ‚Üí <i>Video notes</i>
üéß <b>Video notes</b> ‚Üí <i>Voice messages</i>

üì§ Just upload your file and wait a moment while it's being converted.  
<b>Note:</b> Videos must be shorter than <b>60 seconds</b>.

üõ†Ô∏è Want to convert <b>video notes</b> to <b>voice messages</b>?  
Use the command: /video_to_voice

‚ö†Ô∏è <b>ATTENTION!</b> Audio and video files must be under <b>20 MB</b>! ‚ö†Ô∏è
"""
    await message.answer(text=help_text,
                         parse_mode=ParseMode.HTML)


# –§—É–Ω–∫—Ü–∏—è –ê–≤–∞–Ω–≥–∞—Ä–¥–∞
@dp.message(Command("avangard"))
async def handle_avangard(message: types.Message, state: FSMContext):
    await state.set_state(Avangard.volume)
    avangard_text = """üîä Please send me the <b>volume level</b> (e.g., <code>100</code> = 100%).
Just reply with a number."""

    await message.answer(text=avangard_text,
                         parse_mode=ParseMode.HTML)


@dp.message(Avangard.volume, F.text)
async def volume(message: types.Message, state:FSMContext):

    if is_number(message.text):

        await state.set_state(Avangard.song)

        await state.update_data(volume_num=int(message.text))
        song_text = """üéµ Okay, I got it!
Now, which song do you want?

Please send:
<code>1</code> ‚Äî for the <b>first</b> song
<code>2</code> ‚Äî for the <b>second</b> song

Just reply with the number."""
        await message.answer(text=song_text,
                     parse_mode=ParseMode.HTML)
    else:
        invalid_text = """üî¢ <b>Please send a number.</b>
I didn‚Äôt understand your response ‚Äî just reply with a valid number."""
        await message.answer(text=invalid_text,
                             parse_mode=ParseMode.HTML)


@dp.message(Avangard.volume)
async def invalid_volume(message: types.Message):
    invalid_text = """üî¢ <b>Please send a number.</b>
I didn‚Äôt understand your response ‚Äî just reply with a valid number."""
    await message.answer(text=invalid_text,
                 parse_mode=ParseMode.HTML)


@dp.message(Avangard.song, F.text)
async def song(message: types.Message, state:FSMContext):

    if is_number(message.text):

        await state.set_state(Avangard.transforming)

        await state.update_data(song_num=int(message.text))
        song_text = """‚úÖ Okay, I got it.  
üìπ Now send me a <b>video note</b> to transform it into a voice message."""
        await message.answer(text=song_text,
                     parse_mode=ParseMode.HTML)
    else:
        invalid_text = """üî¢ <b>Please send a number.</b>
I didn‚Äôt understand your response ‚Äî just reply with a valid number."""
        await message.answer(text=invalid_text,
                             parse_mode=ParseMode.HTML)


@dp.message(Avangard.song)
async def invalid_volume(message: types.Message):
    invalid_text = """üî¢ <b>Please send a number.</b>
I didn‚Äôt understand your response ‚Äî just reply with a valid number."""
    await message.answer(text=invalid_text,
                 parse_mode=ParseMode.HTML)



@dp.message(F.video_note, Avangard.transforming)
async def avangard_note(message: types.VideoNote, state:FSMContext):
    # print(song, volume)
    songs = ["AVANGARD", "avangardik"]
    data = await state.get_data()
    max = len(songs) - 1
    song_number= data["song_num"] - 1
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–æ—Ç–æ–ª–æ–∫
    if song_number > max:
        song_number = max

    volume_parameter = data["volume_num"]
    audio_path = rf"C:\Users\bahamax\PycharmProjects\ConvertationBot\audio\{songs[song_number]}.mp3"
    action_sender = ChatActionSender(
        bot=message.bot,
        chat_id=message.chat.id,
        action=ChatAction.UPLOAD_VIDEO_NOTE,
    )

    action_recorder = ChatActionSender(
        bot=message.bot,
        chat_id=message.chat.id,
        action=ChatAction.RECORD_VIDEO_NOTE,
    )

    async with action_recorder:
        await message.bot.send_chat_action(
            chat_id=message.chat.id,
            action=ChatAction.RECORD_VIDEO_NOTE,
        )

    print("–ø—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç")
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
    try:
        file_id = message.video_note.file_id
        file = await bot.get_file(file_id)
    except:
        error_text = (f"""‚õîÔ∏è <b>Failed to receive the file.</b>  
The file is too big. Please upload a file smaller than <b>20 MB</b>."""
                      # f"\nError: {e}"
                      )
        await message.answer(text=error_text,
                             parse_mode=ParseMode.HTML)
        return

    print("–ø—ã—Ç–∞—é—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    file_path = file.file_path
    local_filename = f"downloads/{file_id}.mp4"

    # –§–æ—Ä–º–∏—Ä—É–µ–º "—Å–æ–ª—å" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –∫ –∏–º–µ–Ω–∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤ –æ–¥–∏–Ω –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
    sault = randint(0, 50000)
    output_path = local_filename[:-4] + f"{sault}.mp4"

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs("downloads", exist_ok=True)

    print("–ø—ã—Ç–∞—é—Å—å —Å–∫–∞—á–∞—Ç—å")
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await bot.download_file(file_path,
                            destination=local_filename
                            )

    print("–≥–æ—Ç–æ–≤–ª—é—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")
    await avangard_video(local_filename, output_path, audio_path, volume_parameter)
    # if successfull == False:
    #     print("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–∞")
    #     duration_text = """‚õîÔ∏èThe bot can <b>ONLY</b> process videos <b>SHORTER than 60 seconds!</b>‚õîÔ∏è"""
    #     await message.answer(text=duration_text,
    #                          parse_mode=ParseMode.HTML)
    #     os.remove(local_filename)
    #     return

    waiting_text = """‚úÖ I got it.  
Please wait a moment..."""
    msg = await message.answer(text=waiting_text,
                               parse_mode=ParseMode.HTML)

    # –ü–æ–∫–∞–∑—ã–≤–∞—é —á—Ç–æ –∫—Ä—É–∂–æ–∫ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    async with action_sender:
        await message.bot.send_chat_action(
            chat_id=message.chat.id,
            action=ChatAction.UPLOAD_VIDEO_NOTE,
        )

    print("–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∫–∞–∫ video_note
    await message.answer_video_note(video_note=types.FSInputFile(path=output_path))

    await msg.delete()
    await state.clear()

    print("–ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
    os.remove(local_filename)
    os.remove(output_path)


# –§—É–Ω–∫—Ü–∏—è –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
@dp.message(Command("video_to_voice"))
async def handle_vtovoice(message: types.Message, state: FSMContext):
    await state.set_state(Vtovoice.getting_processing)
    test_text = """üìπ Please send me a <b>video note</b>, and I will convert it to a voice message. üé§"""

    await message.answer(text=test_text,
                         parse_mode=ParseMode.HTML)



@dp.message(F.video_note|F.video, Vtovoice.getting_processing)
async def video_to_voice_processing(message: types.VideoNote, state:FSMContext):

    action_sender = ChatActionSender(
        bot=message.bot,
        chat_id=message.chat.id,
        action=ChatAction.UPLOAD_VOICE,
    )
    action_recorder = ChatActionSender(
        bot=message.bot,
        chat_id=message.chat.id,
        action=ChatAction.RECORD_VOICE,
    )
    async with action_recorder:
        await message.bot.send_chat_action(
            chat_id=message.chat.id,
            action=ChatAction.RECORD_VOICE,
        )

    print("–ø—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç")
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
    try:
        if message.video_note:
            file_id = message.video_note.file_id
        else:
            file_id = message.video.file_id
        file = await bot.get_file(file_id)

    except:
        error_text = (f"""‚õîÔ∏è <b>Failed to receive the file.</b>  
The file is too big. Please upload a file smaller than <b>20 MB</b>."""
                      # f"\nError: {e}"
                      )

        await message.answer(text=error_text,
                             parse_mode=ParseMode.HTML)
        return

    print("–ø—ã—Ç–∞—é—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    file_path = file.file_path
    local_filename = f"downloads/{file_id}.mp4"

    # –§–æ—Ä–º–∏—Ä—É–µ–º "—Å–æ–ª—å" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –∫ –∏–º–µ–Ω–∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤ –æ–¥–∏–Ω –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
    sault = randint(0, 50000)
    output_path = local_filename[:-4] + f"{sault}.mp3"

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs("downloads", exist_ok=True)

    print("–ø—ã—Ç–∞—é—Å—å —Å–∫–∞—á–∞—Ç—å")
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await bot.download_file(file_path,
                            destination=local_filename
                            )

    print("–≥–æ—Ç–æ–≤–ª—é—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")
    await audio_from_video(local_filename, output_path)
    # if successfull == False:
    #     print("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–∞")
    #     duration_text = """‚õîÔ∏èThe bot can <b>ONLY</b> process videos <b>SHORTER than 60 seconds!</b>‚õîÔ∏è"""
    #     await message.answer(text=duration_text,
    #                          parse_mode=ParseMode.HTML)
    #     os.remove(local_filename)
    #     return

    waiting_text = """‚úÖ I got it.  
Please wait a moment..."""
    msg = await message.answer(text=waiting_text,
                               parse_mode=ParseMode.HTML)

    # –ü–æ–∫–∞–∑—ã–≤–∞—é —á—Ç–æ –∫—Ä—É–∂–æ–∫ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    async with action_sender:
        await message.bot.send_chat_action(
            chat_id=message.chat.id,
            action=ChatAction.UPLOAD_VOICE,
        )

    print("–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∫–∞–∫ voice
    await message.reply_voice(voice=types.FSInputFile(path=output_path))

    await msg.delete()
    await state.clear()

    print("–ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
    os.remove(local_filename)
    os.remove(output_path)



# –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ê—É–¥–∏–æ –≤ –ì–°
@dp.message(F.audio)
async def handle_audio(message: types.Audio):
    # await message.bot.send_chat_action(
    #     chat_id=message.chat.id,
    #     action=ChatAction.UPLOAD_VOICE,
    # )
    action_sender = ChatActionSender(
        bot = message.bot,
        chat_id= message.chat.id,
        action=ChatAction.UPLOAD_VOICE,
    )
    action_recorder = ChatActionSender(
        bot=message.bot,
        chat_id=message.chat.id,
        action=ChatAction.RECORD_VOICE,
    )
    async with action_recorder:
        await message.bot.send_chat_action(
            chat_id=message.chat.id,
            action=ChatAction.RECORD_VOICE,
        )

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
    try:
        file_id = message.audio.file_id
        file = await bot.get_file(file_id)
    except:
        error_text = (f"""‚õîÔ∏è <b>Failed to receive the file.</b>  
The file is too big. Please upload a file smaller than <b>20 MB</b>."""
                      # f"\nError: {e}"
                      )
        await message.answer(text=error_text,
                             parse_mode=ParseMode.HTML)
        return


    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    file_path = file.file_path
    local_filename = f"downloads/{file_id}.mp3"

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs("downloads", exist_ok=True)

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await bot.download_file(file_path, destination=local_filename)



    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ –≤—Å—ë –∏–¥—ë—Ç –ø–æ –ø–ª–∞–Ω—É
    waiting_text = """‚úÖ I got it.  
Please wait a moment..."""
    msg = await message.answer(text=waiting_text,
                         parse_mode=ParseMode.HTML)

    async with action_recorder:
        await message.bot.send_chat_action(
            chat_id=message.chat.id,
            action=ChatAction.UPLOAD_VOICE,
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∫–∞–∫ voice
    await message.reply_voice(voice=types.FSInputFile(path=local_filename))

    await msg.delete()

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
    os.remove(local_filename)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è AVANGAARDD
async def avangard_video(input_path: str, output_path: str, audio_path: str, volume_parametr: int):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫ –∫—Ä—É–∂–æ—á–∫—É –ø–µ—Å–µ–Ω–∫—É AVANGARD.

    Args:
        input_path (str): –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É.
        audio_path (str): –ü—É—Ç—å –∫ –¥–æ–±–∞–≤–ª—è–µ–º–æ–º—É –∞—É–¥–∏–æ.
        output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞.

    Raises:
        ffmpeg.Error: –ï—Å–ª–∏ FFmpeg –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    # print("input_path:", input_path)
    print("exists:", os.path.exists(input_path))


    try:
        print(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –≤–∏–¥–µ–æ='{input_path}', –∞—É–¥–∏–æ='{audio_path}', –≤—ã–≤–æ–¥='{output_path}'")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
        input_video = ffmpeg.input(input_path)
        input_audio = ffmpeg.input(audio_path)

        # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏: –≤–∏–¥–µ–æ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞, –∞—É–¥–∏–æ –∏–∑ –æ–±–æ–∏—Ö
        video_stream = input_video['v']  # –í–∏–¥–µ–æ–ø–æ—Ç–æ–∫ –∏–∑ input_path
        original_audio = input_video['a']  # –ê—É–¥–∏–æ–ø–æ—Ç–æ–∫ –∏–∑ input_path
        audio_bob = input_audio['a']  # –ê—É–¥–∏–æ–ø–æ—Ç–æ–∫ –∏–∑ audio_path


        volumek = volume_parametr / 500
        external_audio = ffmpeg.filter(audio_bob, 'volume', volume=volumek)

        # –°–º–µ—à–∏–≤–∞–µ–º –¥–≤–∞ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞ —Å –ø–æ–º–æ—â—å—é —Ñ–∏–ª—å—Ç—Ä–∞ 'amix'
        # inputs=2 —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –Ω–∞ –≤—Ö–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–¥–∞–µ—Ç—Å—è 2 –ø–æ—Ç–æ–∫–∞
        # duration='first' - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ -shortest, –≤—ã–±–∏—Ä–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        # normalize=True - (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≥—Ä–æ–º–∫–æ—Å—Ç—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–ª–∏–ø–ø–∏–Ω–≥–∞
        mixed_audio = ffmpeg.filter(
            [original_audio, external_audio],
            'amix',
            inputs=2,
            duration='shortest'
            # duration='first', # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'first', 'shortest', 'longest'
            # normalize=True   # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        )

        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è FFmpeg
        # –ú—ã –±–µ—Ä–µ–º –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫ video_stream –∏ —Å–º–µ—à–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ mixed_audio


        # stream = ffmpeg.output(
        #     video_stream,  # –í–∏–¥–µ–æ (–∫–æ–ø–∏—Ä—É–µ–º –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
        #     mixed_audio,  # –°–º–µ—à–∞–Ω–Ω—ã–π –∑–≤—É–∫ (–±—É–¥–µ—Ç –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω)
        #     output_path,
        #     vcodec='copy',  # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –∫–æ–¥–µ–∫ (–±—ã—Å—Ç—Ä–µ–µ, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ñ–æ—Ä–º–∞—Ç)
        #     acodec='aac',  # –í—ã–±—Ä–∞—Ç—å –∞—É–¥–∏–æ –∫–æ–¥–µ–∫ (AAC - —Ö–æ—Ä–æ—à–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
        #     audio_bitrate='128k',  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 192 kbps)
        #     shortest=True
        #     # –û–ø—Ü–∏—è "-shortest": –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —Å–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –≤—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫ (–≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ - –≤–∏–¥–µ–æ)
        # )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ filename:
        stream = ffmpeg.output(
            video_stream,
            mixed_audio,
            filename=output_path,  # <-- –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            vcodec='copy',
            acodec='aac',
            audio_bitrate='128k',
            # shortest=True
        )


        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å FFmpeg
        # overwrite_output=True –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        print("–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã FFmpeg...")
        stdout, stderr = stream.run(overwrite_output=True, capture_stdout=True, capture_stderr=True)

        # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–≤–æ–¥–∞ FFmpeg
        # print("FFmpeg stdout:", stdout.decode())
        # print("FFmpeg stderr:", stderr.decode())
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ '{output_path}'")

    except ffmpeg.Error as e:
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ:', e)
        if e.stderr:
            print('FFmpeg stderr:', e.stderr.decode('utf8', errors='ignore'))
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ '{input_path}'")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
async def audio_from_video(input_path: str, output_path: str):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫ –∫—Ä—É–∂–æ—á–∫—É –ø–µ—Å–µ–Ω–∫—É AVANGARD.

    Args:
        input_path (str): –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É.
        output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞.

    Raises:
        ffmpeg.Error: –ï—Å–ª–∏ FFmpeg –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    # print("input_path:", input_path)
    print("exists:", os.path.exists(input_path))


    try:
        print(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –≤–∏–¥–µ–æ='{input_path}', –≤—ã–≤–æ–¥='{output_path}'")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
        input_video = ffmpeg.input(input_path)

        # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏: –≤–∏–¥–µ–æ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞, –∞—É–¥–∏–æ
        video_stream = input_video['v']  # –í–∏–¥–µ–æ–ø–æ—Ç–æ–∫ –∏–∑ input_path
        original_audio = input_video['a']  # –ê—É–¥–∏–æ–ø–æ—Ç–æ–∫ –∏–∑ input_path




        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ filename:
        stream = ffmpeg.output(

            original_audio,
            filename=output_path,  # <-- –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            acodec='libmp3lame',
            audio_bitrate='128k',
            # shortest=True
        )


        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å FFmpeg
        # overwrite_output=True –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        print("–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã FFmpeg...")
        stdout, stderr = stream.run(overwrite_output=True, capture_stdout=True, capture_stderr=True)

        # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–≤–æ–¥–∞ FFmpeg
        # print("FFmpeg stdout:", stdout.decode())
        # print("FFmpeg stderr:", stderr.decode())
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ '{output_path}'")

    except ffmpeg.Error as e:
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ:', e)
        if e.stderr:
            print('FFmpeg stderr:', e.stderr.decode('utf8', errors='ignore'))
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ '{input_path}'")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –≤–∏–¥–µ–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç
async def crop_video_to_square(input_path: str, output_path: str):
    """
    –û–±—Ä–µ–∑–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã –∏ —É–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–æ 384x384.

    Args:
        input_path (str): –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É.
        output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞.
    """
    print("input_path:", input_path)
    print("exists:", os.path.exists(input_path))

    try:
        probe = ffmpeg.probe(input_path)

        format_info = probe.get("format", {})
        duration = float(format_info.get("duration", 0))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if duration >= 60:
            print("‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ:", duration, "—Å–µ–∫—É–Ω–¥")
            return False


        video_stream = next((stream for stream in probe['streams'] if stream['codec_type'] == 'video'), None)
        if video_stream is None:
            print(f"–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫ –≤ —Ñ–∞–π–ª–µ '{input_path}'")
            return

        width = int(video_stream['width'])
        height = int(video_stream['height'])
        min_dim = min(width, height)
        offset_x = (width - min_dim) // 2
        offset_y = (height - min_dim) // 2

        crop_filter = f"crop={min_dim}:{min_dim}:{offset_x}:{offset_y},scale=384:384"

        (
            ffmpeg
            .input(input_path)
            .output(output_path,
                    vf=crop_filter,
                    vcodec="libx264",
                    acodec="aac",
                    audio_bitrate="128k",
                    format="mp4",
                    movflags="faststart")
            .run(overwrite_output=True)
        )

        print(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ '{output_path}'")
        return True

    except ffmpeg.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e.stderr.decode('utf8')}")
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ '{input_path}'")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")



# –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –í–∏–¥–µ–æ –≤ –ö—Ä—É–∂–∫–∏
@dp.message(F.video)
async def handle_video_for_note(message: types.Video):
    # await message.bot.send_chat_action(
    #     chat_id=message.chat.id,
    #     action=ChatAction.UPLOAD_VOICE,
    # )
    action_sender = ChatActionSender(
        bot=message.bot,
        chat_id=message.chat.id,
        action=ChatAction.UPLOAD_VIDEO_NOTE,
    )

    action_recorder = ChatActionSender(
        bot=message.bot,
        chat_id=message.chat.id,
        action=ChatAction.RECORD_VIDEO_NOTE,
    )

    async with action_recorder:
        await message.bot.send_chat_action(
            chat_id=message.chat.id,
            action=ChatAction.RECORD_VIDEO_NOTE,
        )

    print("–ø—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç")
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
    try:
        file_id = message.video.file_id
        file = await bot.get_file(file_id)
    except:
        error_text = (f"""‚õîÔ∏è <b>Failed to receive the file.</b>  
The file is too big. Please upload a file smaller than <b>20 MB</b>."""
                      # f"\nError: {e}"
                      )
        await message.answer(text=error_text,
                             parse_mode=ParseMode.HTML)
        return

    print("–ø—ã—Ç–∞—é—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    file_path = file.file_path
    local_filename = f"downloads/{file_id}.mp4"

    # –§–æ—Ä–º–∏—Ä—É–µ–º "—Å–æ–ª—å" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –∫ –∏–º–µ–Ω–∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤ –æ–¥–∏–Ω –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
    sault = randint(0,50000)
    output_path = local_filename[:-4] + f"{sault}.mp4"

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs("downloads", exist_ok=True)

    print("–ø—ã—Ç–∞—é—Å—å —Å–∫–∞—á–∞—Ç—å")
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await bot.download_file(file_path,
                            destination=local_filename
                            )

    print("–≥–æ—Ç–æ–≤–ª—é—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")
    successfull = await crop_video_to_square(local_filename, output_path)
    if successfull == False:
        print("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–∞")
        duration_text = """‚õîÔ∏è The bot can <b>ONLY</b> process videos <b>SHORTER than 60 seconds!</b>"""
        await message.answer(text=duration_text,
                             parse_mode=ParseMode.HTML)
        os.remove(local_filename)
        return

    waiting_text = """‚úÖ I got it.  
Please wait a moment..."""
    msg = await message.answer(text=waiting_text,
                         parse_mode=ParseMode.HTML)


    # –ü–æ–∫–∞–∑—ã–≤–∞—é —á—Ç–æ –∫—Ä—É–∂–æ–∫ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    async with action_sender:
        await message.bot.send_chat_action(
            chat_id=message.chat.id,
            action=ChatAction.UPLOAD_VIDEO_NOTE,
        )


    print("–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∫–∞–∫ video_note
    await message.answer_video_note(video_note=types.FSInputFile(path=output_path))

    await msg.delete()

    print("–ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
    os.remove(local_filename)
    os.remove(output_path)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(F.voice)
async def handle_for_voice(message: types.Audio):
    answer_voice = """‚õîÔ∏è Please send an <b>AUDIO FILE</b>.  
I don't process voice messages."""
    await message.answer(text=answer_voice, parse_mode=ParseMode.HTML)

@dp.message(F.video_note)
async def handle_for_voice(message: types.VideoNote):
    answer_video_note = """‚õîÔ∏è Please send just an ordinary <b>VIDEO</b>.  
I don't process video notes."""
    await message.answer(text=answer_video_note, parse_mode=ParseMode.HTML)
"""
–≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—ä—è—Å–Ω—è—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
—á—Ç–æ–±—ã –±–æ—Ç –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–ª, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–ø—É—Ç–∞–ª –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –ì–° –∏–ª–∏ –ö—Ä—É–∂–æ–∫
"""


async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())